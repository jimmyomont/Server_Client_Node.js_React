// Import des modules nÃ©cessaires
import express from 'express'; // Importe le module Express.js
import dotenv from 'dotenv'; // Importe le module dotenv pour la gestion des variables d'environnement
import { fileURLToPath } from 'url'; // Importe la fonction fileURLToPath du module URL pour convertir les URL de fichiers en chemins de fichiers
import { dirname, join } from 'path'; // Importe les fonctions dirname et join du module path pour manipuler les chemins de fichiers
import sequelize from './db/database.js'; // Importe l'instance de Sequelize pour la connexion Ã  la base de donnÃ©es
import apiRouter from './routes/api.js'; // Importe le routeur API pour gÃ©rer les requÃªtes API
import cors from 'cors'; // Importe le module cors pour gÃ©rer les autorisations CORS (Cross-Origin Resource Sharing)

// Configuration des variables d'environnement
dotenv.config(); // Charge les variables d'environnement Ã  partir du fichier .env

// CrÃ©ation de l'application Express
const app = express(); // CrÃ©e une instance de l'application Express

// Configuration du port
const port = process.env.PORT || 8000; // Le port sur lequel l'application Ã©coute, soit celui spÃ©cifiÃ© dans les variables d'environnement, soit le port 3000 par dÃ©faut

// RÃ©cupÃ©ration du chemin du rÃ©pertoire courant
const cheminUrl = fileURLToPath(import.meta.url); // Convertit l'URL du fichier en chemin de fichier
const cheminRepertoire = dirname(cheminUrl); // Obtient le rÃ©pertoire du fichier en utilisant le chemin du fichier

// DÃ©finition des middlewares
app.use(express.static(join(cheminRepertoire, 'dist'))); // Utilise le middleware static pour servir les fichiers statiques depuis le rÃ©pertoire 'dist'
app.use(express.json()); // Utilise le middleware json pour analyser les corps de requÃªte au format JSON
app.use(cors()); // Utilise le middleware cors pour gÃ©rer les autorisations Cross-Origin

// Connexion Ã  la base de donnÃ©es
sequelize
  .authenticate() // VÃ©rifie la connexion Ã  la base de donnÃ©es en utilisant l'instance Sequelize
  .then(() => {
    console.log('ConnectÃ© Ã  la base de donnÃ©es PostgreSQL ğŸ¥³.'); // Affiche un message si la connexion est rÃ©ussie
  })
  .catch((err) => {
    console.error('Erreur de connexion Ã  la base de donnÃ©es ğŸ˜ˆ:', err); // Affiche une erreur si la connexion Ã©choue
  });

// DÃ©finition des routes
app.post('/Api', apiRouter); // Associe le routeur API aux requÃªtes POST sur le chemin '/Api'
app.get('/', (req, res) => {
  res.send('La partie Serveur !'); // RÃ©pond avec ce message pour les requÃªtes GET sur le chemin '/'
});

// Gestion de la fermeture du processus
process.on('SIGINT', () => {
  sequelize.close(); // Ferme la connexion Ã  la base de donnÃ©es lorsque le processus reÃ§oit le signal SIGINT (gÃ©nÃ©ralement envoyÃ© lorsqu'on arrÃªte le serveur)
  process.exit(); // Termine le processus
});

// Synchronisation de la base de donnÃ©es
sequelize.sync() // Synchronise les modÃ¨les dÃ©finis avec la base de donnÃ©es (crÃ©e les tables si elles n'existent pas)
  .then(() => {
    console.log('Les tables ont Ã©tÃ© synchronisÃ©es avec la base de donnÃ©es.'); // Affiche un message si la synchronisation est rÃ©ussie
  })
  .catch((err) => {
    console.error('Erreur lors de la synchronisation des tables :', err); // Affiche une erreur si la synchronisation Ã©choue
  });

// DÃ©marrage du serveur
app.listen(port, () => {
  console.log(`Ã‰coute sur http://localhost:${port}/ ğŸ“º`); // Affiche un message lorsque le serveur dÃ©marre et Ã©coute les requÃªtes
});
